const etherChatABI = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_owner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "_content",
        type: "string",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_id",
        type: "uint256",
      },
    ],
    name: "Write",
    type: "event",
  },
  {
    inputs: [],
    name: "id",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
      {
        internalType: "string",
        name: "_content",
        type: "string",
      },
    ],
    name: "write",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];
const ERC721ABI = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name_",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol_",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "approved",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "ApprovalForAll",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getApproved",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "ownerOf",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "tokenURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const LPFactoryABI = [
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "chatroom",
				"type": "address"
			},
			{
				"indexed": true,
				"internalType": "address",
				"name": "owner",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "amount",
				"type": "uint256"
			}
		],
		"name": "Claim",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "chatroom",
				"type": "address"
			},
			{
				"indexed": true,
				"internalType": "address",
				"name": "owner",
				"type": "address"
			}
		],
		"name": "CreateLP",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "chatroom",
				"type": "address"
			},
			{
				"indexed": true,
				"internalType": "address",
				"name": "owner",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "amount",
				"type": "uint256"
			}
		],
		"name": "Deposit",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "previousOwner",
				"type": "address"
			},
			{
				"indexed": true,
				"internalType": "address",
				"name": "newOwner",
				"type": "address"
			}
		],
		"name": "OwnershipTransferred",
		"type": "event"
	},
	{
		"inputs": [],
		"name": "baseFund",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"name": "chatroomFund",
		"outputs": [
			{
				"internalType": "address",
				"name": "owner",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "amount",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"name": "chatroomStatus",
		"outputs": [
			{
				"internalType": "contract Token",
				"name": "token",
				"type": "address"
			},
			{
				"internalType": "address",
				"name": "pair",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "status",
				"type": "uint256"
			},
			{
				"internalType": "uint256",
				"name": "totalFund",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "_chatroom",
				"type": "address"
			}
		],
		"name": "claim",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			},
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"name": "claimed",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "_chatroom",
				"type": "address"
			}
		],
		"name": "createLP",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "createLPTimes",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "_chatroom",
				"type": "address"
			}
		],
		"name": "deposit",
		"outputs": [],
		"stateMutability": "payable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "_chatroom",
				"type": "address"
			}
		],
		"name": "getChatroomFundLength",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "_chatroom",
				"type": "address"
			}
		],
		"name": "getClaimAmount",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "owner",
		"outputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "renounceOwnership",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "router",
		"outputs": [
			{
				"internalType": "contract ISwapV2",
				"name": "",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "_baseFund",
				"type": "uint256"
			}
		],
		"name": "setBaseFund",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "_createLPTimes",
				"type": "uint256"
			}
		],
		"name": "setCreateLPTimes",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "contract ISwapV2",
				"name": "_router",
				"type": "address"
			}
		],
		"name": "setRouter",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "newOwner",
				"type": "address"
			}
		],
		"name": "transferOwnership",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	}
]

const pairABI = [
  {
    inputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount0",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount1",
        type: "uint256",
      },
      { indexed: true, internalType: "address", name: "to", type: "address" },
    ],
    name: "Burn",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount0",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount1",
        type: "uint256",
      },
    ],
    name: "Mint",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount0In",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount1In",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount0Out",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount1Out",
        type: "uint256",
      },
      { indexed: true, internalType: "address", name: "to", type: "address" },
    ],
    name: "Swap",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint112",
        name: "reserve0",
        type: "uint112",
      },
      {
        indexed: false,
        internalType: "uint112",
        name: "reserve1",
        type: "uint112",
      },
    ],
    name: "Sync",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: "address", name: "from", type: "address" },
      { indexed: true, internalType: "address", name: "to", type: "address" },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    constant: true,
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "MINIMUM_LIQUIDITY",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "PERMIT_TYPEHASH",
    outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      { internalType: "address", name: "", type: "address" },
      { internalType: "address", name: "", type: "address" },
    ],
    name: "allowance",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      { internalType: "address", name: "spender", type: "address" },
      { internalType: "uint256", name: "value", type: "uint256" },
    ],
    name: "approve",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [{ internalType: "address", name: "", type: "address" }],
    name: "balanceOf",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [{ internalType: "address", name: "to", type: "address" }],
    name: "burn",
    outputs: [
      { internalType: "uint256", name: "amount0", type: "uint256" },
      { internalType: "uint256", name: "amount1", type: "uint256" },
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "decimals",
    outputs: [{ internalType: "uint8", name: "", type: "uint8" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "factory",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "getReserves",
    outputs: [
      { internalType: "uint112", name: "_reserve0", type: "uint112" },
      { internalType: "uint112", name: "_reserve1", type: "uint112" },
      { internalType: "uint32", name: "_blockTimestampLast", type: "uint32" },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      { internalType: "address", name: "_token0", type: "address" },
      { internalType: "address", name: "_token1", type: "address" },
    ],
    name: "initialize",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "kLast",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [{ internalType: "address", name: "to", type: "address" }],
    name: "mint",
    outputs: [{ internalType: "uint256", name: "liquidity", type: "uint256" }],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "name",
    outputs: [{ internalType: "string", name: "", type: "string" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [{ internalType: "address", name: "", type: "address" }],
    name: "nonces",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      { internalType: "address", name: "owner", type: "address" },
      { internalType: "address", name: "spender", type: "address" },
      { internalType: "uint256", name: "value", type: "uint256" },
      { internalType: "uint256", name: "deadline", type: "uint256" },
      { internalType: "uint8", name: "v", type: "uint8" },
      { internalType: "bytes32", name: "r", type: "bytes32" },
      { internalType: "bytes32", name: "s", type: "bytes32" },
    ],
    name: "permit",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "price0CumulativeLast",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "price1CumulativeLast",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [{ internalType: "address", name: "to", type: "address" }],
    name: "skim",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      { internalType: "uint256", name: "amount0Out", type: "uint256" },
      { internalType: "uint256", name: "amount1Out", type: "uint256" },
      { internalType: "address", name: "to", type: "address" },
      { internalType: "bytes", name: "data", type: "bytes" },
    ],
    name: "swap",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "symbol",
    outputs: [{ internalType: "string", name: "", type: "string" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [],
    name: "sync",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "token0",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "token1",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "totalSupply",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      { internalType: "address", name: "to", type: "address" },
      { internalType: "uint256", name: "value", type: "uint256" },
    ],
    name: "transfer",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      { internalType: "address", name: "from", type: "address" },
      { internalType: "address", name: "to", type: "address" },
      { internalType: "uint256", name: "value", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
];
const Web3Modal = window.Web3Modal.default;

const WalletConnectProvider = window.WalletConnectProvider.default;

const ipfs = window.IpfsHttpClient.create({
  host: "ipfs.infura.io",
  port: "5001",
});

let chatroom;

let explorerUrl;

let explorerNFTUrl;

let etherChat;

let LPFactory;

let emitter;

async function initWeb3() {
  const providerOptions = {
    walletconnect: {
      package: WalletConnectProvider,
      options: {
        // Mikko's test key - don't copy as your mileage may vary
        infuraId: "9aa3d95b3bc440fa88ea12eaa4456161",
      },
    },
  };
  web3Modal = new Web3Modal({
    cacheProvider: false, // optional
    providerOptions, // required
    disableInjectedProvider: false, // optional. For MetaMask / Brave / Opera.
  });
  try {
    provider = await web3Modal.connect();
    provider.enable();
    flush();
  } catch (e) {
    console.log("Could not get a wallet connection", e);
    return;
  }
  // Subscribe to accounts change
  provider.on("accountsChanged", async (accounts) => {
    flush();
  });
  // Subscribe to chainId change
  provider.on("chainChanged", async (chainId) => {
    flush();
  });
  // Subscribe to networkId change
  provider.on("networkChanged", async (networkId) => {
    flush();
  });
}

function chatButtonAlert() {
  let div = $(
    '<div class="alert alert-danger alert-dismissible fade show" role="alert" > <strong>Please search an address chatroom</strong>  <button    type="button"    class="close"    data-dismiss="alert"    aria-label="Close"  >    <span aria-hidden="true">&times;</span>  </button></div>'
  );
  $(".contentView").prepend(div);
}

async function flush() {
  web3 = new Web3(provider);
  chainId = await web3.eth.getChainId();
  console.log("chainId:" + chainId);

  if (chainId == 1) {
    uint = "ETH";
    // const contractAddress = "0x766b39d4b747ddcf78eab0daa447e9650e2c239d";
    // contract = new web3.eth.Contract(ABI, contractAddress);
    explorerNFTUrl = "https://opensea.io";
    explorerUrl = "https://etherscan.io";
    // $("#network").html("Ethereum Mainnet");
    $(".network").html("Unsupported Network(now only rinkeby is supported)");

    $(".network").css({
      background: "red",
      "-webkit-text-fill-color": "transparent",
      "-webkit-background-clip": "text",
    });

    // $(".network").css({
    //   background: "cadetBlue",
    //   "-webkit-text-fill-color": "transparent",
    //   "-webkit-background-clip": "text",
    // });
  } else if (chainId == 4) {
    uint = "ETH";
    etherChat = new web3.eth.Contract(
      etherChatABI,
      "0x8b67760994786F7cdD6BE07A716504471D182D50"
    );
    LPFactory = new web3.eth.Contract(
      LPFactoryABI,
      "0x17a7bb3aa1cb092602C7bf83209F40A2f2fFbfD4"
    );
    explorerUrl = "https://rinkeby.etherscan.io";
    explorerNFTUrl = "https://testnets.opensea.io";
    $(".network").html("Rinkeby Test Network");
    $(".network").css({
      background: "orange",
      "-webkit-text-fill-color": "transparent",
      "-webkit-background-clip": "text",
    });
  } else {
    $(".network").html("Invalid Network");
    $(".network").css({
      background: "red",
      "-webkit-text-fill-color": "transparent",
      "-webkit-background-clip": "text",
    });
  }
  const accounts = await web3.eth.getAccounts();
  selectedAccount = accounts[0];
  let ensName = await getEnsName(selectedAccount);
  console.log(selectedAccount);
  $(".account").html(ensName);
}

async function claim(chatroom) {
  LPFactory.methods.claim(chatroom).send({ from: selectedAccount });
}

async function deposit(chatroom, amount) {
  amount = amount * 10 ** 18;
  LPFactory.methods
    .deposit(chatroom)
    .send({ from: selectedAccount, value: amount });
}

async function write(token, content) {
  etherChat.methods.write(token, content).send({ from: selectedAccount });
}

async function getData(token) {
  chatroom = token;
  $(".chatroom-body").html("");
  if (emitter) {
    emitter.removeAllListeners("data");
  }
  emitter = etherChat.events
    .Write(
      {
        filter: { _token: token },
        fromBlock: 0,
      },
      function (error, event) {}
    )
    .on("data", function (event) {
      let content = event["returnValues"]["_content"];
      let token = event["returnValues"]["_token"];
      let owner = event["returnValues"]["_owner"];
      let id = event["returnValues"]["_id"];
      let card = $(
        "</br><div class='chatroom-title'><h5># " +
          id +
          "</h5>" +
          owner +
          " Say :<div>" +
          content +
          "</div></div></br>"
      );
      $(".chatroom-body").append(card);
    });
}

function toFixedFloor(input, decimals) {
  let k = 10 ** decimals;
  return Math.floor(input * k) / k;
}

function generateArray(start, end) {
  return Array.from(new Array(end + 1).keys()).slice(start);
}

async function getEnsName(account) {
  const ens = new ethers.providers.Web3Provider(web3.currentProvider);
  try {
    let ensName = await ens.lookupAddress(account);
    if (ensName == null) return account;
    return ensName;
  } catch (e) {
    return account;
  }
}

async function createLP(chatroom) {
  console.log(chatroom);
  LPFactory.methods.createLP(chatroom).send({ from: selectedAccount });
}

async function getProgress(chatroom) {
  $(".chatroom-header").append(" ");
  $(".progress-content").remove();
  if (!web3.utils.isAddress(chatroom)) return;

  let base = await LPFactory.methods.baseFund().call();
  let times = await LPFactory.methods.createLPTimes().call();
  let status = await LPFactory.methods.chatroomStatus(chatroom).call();
  if (status.status == 1) {
    let token = status.token;
    let pair = status.pair;
    pairContract = new web3.eth.Contract(pairABI, pair);
    console.log(pair);
    let reservers = await pairContract.methods.getReserves().call();
    let price = reservers._reserve1 / reservers._reserve0;
    price = price.toFixed(18);

    let tradeButton = $(
      '<button type="button" class="btn btn-success progress-content" ><a  style="text-decoration:none;color: inherit;" href="https://app.uniswap.org/#/swap?outputCurrency=' +
        token +
        '" target="_blank"> Trade </a></button>'
    );
    let priceBar = $(
      '<div class="row justify-content-center progress-content"><h2>price : ' +
        price +
        "</h2>"
    );
    $(".chatroom-button").prepend(tradeButton);

    $(".progress-header").prepend(priceBar);
    let claimed = await LPFactory.methods
      .claimed(chatroom, selectedAccount)
      .call();
      console.log(claimed);
    let claimAmount = await LPFactory.methods.getClaimAmount(chatroom).call({from:selectedAccount});
    console.log(claimAmount);
    if (!claimed && claimAmount > 0) {
      let claimButton = $(
        '<button type="button" class="btn btn-warning progress-content" onClick="claim(\'' +
          chatroom +
          "')\">Claim</button>"
      );
      $(".chatroom-button").prepend(claimButton);
    }
    return;
  }
  let msg = status.totalFund / 10 ** 18 + " / " + (base * times) / 10 ** 18;
  let div = (100 * status.totalFund) / (base * times);

  let createLPButton;
  if (div < 100) {
    createLPButton = $(
      '<button type="button" class="btn btn-warning progress-content" data-target="#deposit-modal" data-toggle="modal"> CreateLP </button>'
    );
  } else {
    createLPButton = $(
      '<button type="button" class="btn btn-success progress-content" onClick="createLP(\'' +
        chatroom +
        "')\"> CreateLP </button>"
    );
  }
  let progress = $(
    '<div class="progress-content"><div class="row justify-content-center title-content"><h3>LP is being created . Progress : ' +
      msg +
      ' ETH</h3> </div><div class="progress"> <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: ' +
      div +
      '%" aria-valuenow="' +
      div +
      '" aria-valuemin="0" aria-valuemax="100" ></div> </div></div>'
  );
  $(".chatroom-button").prepend(createLPButton);
  $(".progress-header").prepend(progress);
}

async function uploadToIpfs(content) {
  let res = await ipfs.add(content);
  console.log(res);
  return res["cid"];
}

function getImageFromMetadata(data) {
  console.log(data);
  let image = data["image"];
  if (image) {
    if (image.startsWith("ipfs://")) {
      image = image.replace("ipfs://", "https://dweb.link/ipfs/");
    }
    image = $('<image class="formatImage" src="' + image + '"/>');
  }
  return image;
}

async function getImageFromTokenURI(uri) {
  let ir;
  if (uri.startsWith("ipfs://")) {
    uri = uri.replace("ipfs://", "https://dweb.link/ipfs/");
    $.ajax({
      type: "GET",
      url: uri,
      async: false,
      success: function (data) {
        ir = getImageFromMetadata(data);
      },
    });
  } else if (uri.startsWith("data:application/json;base64,")) {
    let encoded = uri.replace("data:application/json;base64,", "");
    var data = JSON.parse(atob(encoded));
    ir = getImageFromMetadata(data);
  } else if (uri.startsWith("https://")) {
    $.ajax({
      type: "GET",
      url: uri,
      async: false,
      success: function (data) {
        ir = getImageFromMetadata(data);
      },
    });
  } else {
    let data = JSON.parse(uri);
    ir = getImageFromMetadata(data);
  }
  return ir;
}

async function catFromIpfs(cid) {
  let contents = "";
  let source = ipfs.cat(cid);
  const decoder = new TextDecoder("utf-8");

  for await (const chunk of source) {
    contents += decoder.decode(chunk, {
      stream: true,
    });
  }

  contents += decoder.decode();
  return contents;
}

function init() {
  $(".chat-modal-toggle").on("click", function () {
    if (!emitter) {
      chatButtonAlert();
      return;
    }
    if (emitter._eventsCount != 1) {
      chatButtonAlert();
      return;
    }
    $("#chat-modal").modal("show");
  });
  $("#search-input").on("input", async function () {
    let token = $(this).val();
    if (token == "") return;
    let name = "";
    let tokenURI = "";
    try {
      let contract = new web3.eth.Contract(ERC721ABI, token);
      name = await contract.methods.name().call();
      tokenURI = await contract.methods.tokenURI(0).call();
    } catch (e) {
      //do nothing
    }
    if (name != "") {
      $(".chatroom-header").html(" Chatroom@" + name);
      if (tokenURI != "") {
        let image = await getImageFromTokenURI(tokenURI);
        console.log(image);
        $(".chatroom-header").prepend(image);
      }
    } else {
      $(".chatroom-header").html(" Chatroom@" + token);
    }

    getProgress($(this).val());
    getData($(this).val());
  });
  $(".chat-button").on("click", function () {
    let content = $(".chat-content").val();
    write(chatroom, content);
  });
  $(".deposit-button").on("click", function () {
    let amount = $(".deposit-content").val();
    deposit(chatroom, amount);
  });

  $('[data-toggle="tooltip"]').tooltip();
  // Toggle the side navigation
  $("#sidebarToggle, #sidebarToggleTop").on("click", function (e) {
    $("body").toggleClass("sidebar-toggled");
    $(".sidebar").toggleClass("toggled");
    if ($(".sidebar").hasClass("toggled")) {
      $(".sidebar .collapse").collapse("hide");
    }
  });

  // Close any open menu accordions when window is resized below 768px
  $(window).resize(function () {
    if ($(window).width() < 768) {
      $(".sidebar .collapse").collapse("hide");
    }
    // Toggle the side navigation when window is resized below 480px
    if ($(window).width() < 480 && !$(".sidebar").hasClass("toggled")) {
      $("body").addClass("sidebar-toggled");
      $(".sidebar").addClass("toggled");
      $(".sidebar .collapse").collapse("hide");
    }
  });

  // Prevent the content wrapper from scrolling when the fixed side navigation hovered over
  $("body.fixed-nav .sidebar").on(
    "mousewheel DOMMouseScroll wheel",
    function (e) {
      if ($(window).width() > 768) {
        var e0 = e.originalEvent,
          delta = e0.wheelDelta || -e0.detail;
        this.scrollTop += (delta < 0 ? 1 : -1) * 30;
        e.preventDefault();
      }
    }
  );

  $("#commentModal").on("show.bs.modal", function (event) {
    var button = $(event.relatedTarget); // Button that triggered the modal
    var recipient = button.data("whatever"); // Extract info from data-* attributes
    // If necessary, you could initiate an AJAX request here (and then do the updating in a callback).
    // Update the modal's content. We'll use jQuery here, but you could use a data binding library or other methods instead.
    var modal = $(this);
    modal.find(".commentButton").attr("onclick", "comment(" + recipient + ")");
  });

  // Scroll to top button appear
  $(document).on("scroll", function () {
    var scrollDistance = $(this).scrollTop();
    if (scrollDistance > 100) {
      $(".scroll-to-top").fadeIn();
    } else {
      $(".scroll-to-top").fadeOut();
    }
  });

  // Smooth scrolling using jQuery easing
  $(document).on("click", "a.scroll-to-top", function (e) {
    var $anchor = $(this);
    $("html, body")
      .stop()
      .animate(
        {
          scrollTop: $($anchor.attr("href")).offset().top,
        },
        1000,
        "easeInOutExpo"
      );
    e.preventDefault();
  });

  $(document).on("click", "#searchButton", function () {
    let content = $("#search").val();
    window.location.href = "search.html?address=" + content;
  });
}

(async function ($) {
  "use strict"; // Start of use strict
  $(document).ready(function () {
    $(".topbar").load("common/topbar.html", function () {
      $(".modalbar").load("common/modalbar.html", function () {
        init();
        initWeb3();
      });
    });
  });
})(jQuery); // End of use strict
