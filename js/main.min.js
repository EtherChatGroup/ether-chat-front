const etherChatABI = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_owner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "_content",
        type: "string",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_id",
        type: "uint256",
      },
    ],
    name: "Write",
    type: "event",
  },
  {
    inputs: [],
    name: "id",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
      {
        internalType: "string",
        name: "_content",
        type: "string",
      },
    ],
    name: "write",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const Web3Modal = window.Web3Modal.default;

const WalletConnectProvider = window.WalletConnectProvider.default;

const ipfs = window.IpfsHttpClient.create({
  host: "ipfs.infura.io",
  port: "5001",
});

const TYPE = {
  TEXT: "TEXT",
};

let uint;

let explorerUrl;

let explorerNFTUrl;

let etherChat;

let rainbiwWallProtocolContractAddress;

let rainbowWallProtocol;

let emitter;

async function initWeb3() {
  const providerOptions = {
    walletconnect: {
      package: WalletConnectProvider,
      options: {
        // Mikko's test key - don't copy as your mileage may vary
        infuraId: "9aa3d95b3bc440fa88ea12eaa4456161",
      },
    },
  };
  web3Modal = new Web3Modal({
    cacheProvider: false, // optional
    providerOptions, // required
    disableInjectedProvider: false, // optional. For MetaMask / Brave / Opera.
  });
  try {
    provider = await web3Modal.connect();
    provider.enable();
    flush();
  } catch (e) {
    console.log("Could not get a wallet connection", e);
    return;
  }
  // Subscribe to accounts change
  provider.on("accountsChanged", async (accounts) => {
    flush();
  });
  // Subscribe to chainId change
  provider.on("chainChanged", async (chainId) => {
    flush();
  });
  // Subscribe to networkId change
  provider.on("networkChanged", async (networkId) => {
    flush();
  });
}

function alert() {
  let div = $(
    '<div class="alert alert-danger alert-dismissible fade show" role="alert" > <strong>Please search an address chatroom</strong>  <button    type="button"    class="close"    data-dismiss="alert"    aria-label="Close"  >    <span aria-hidden="true">&times;</span>  </button></div>'
  );
  $(".contentView").prepend(div);
}

async function flush() {
  $(".alert").alert();
  $(".chat-modal-toggle").on("click", function () {
    if (!emitter) {
      alert();
      return;
    }
    if (emitter._eventsCount != 1) {
      alert();
      return;
    }
    $("#chat-modal").modal("show");
  });
  $("#search-input").on("input", function () {
    if ($(this).val() == "") return;
    $(".chatroom-header").html("Chatroom@" + $(this).val());
    getData($(this).val());
  });
  $(".chat-button").on("click", function () {
    let content = $(".chat-content").val();
    write(selectedAccount, content);
  });
  web3 = new Web3(provider);
  chainId = await web3.eth.getChainId();
  console.log("chainId:" + chainId);

  if (chainId == 1) {
    uint = "ETH";
    // const contractAddress = "0x766b39d4b747ddcf78eab0daa447e9650e2c239d";
    // contract = new web3.eth.Contract(ABI, contractAddress);
    $(".network").html("Ethereum Mainnet");
    explorerNFTUrl = "https://opensea.io";
    explorerUrl = "https://etherscan.io";
    $("#network").html("Ethereum Mainnet");

    // $(".network").css({
    //   background: "cadetBlue",
    //   "-webkit-text-fill-color": "transparent",
    //   "-webkit-background-clip": "text",
    // });
  } else if (chainId == 4) {
    uint = "ETH";
    etherChat = new web3.eth.Contract(
      etherChatABI,
      "0x052fbbEf65f766E6999Fe14f42d8b877b9227b1a"
    );
    explorerUrl = "https://rinkeby.etherscan.io";
    explorerNFTUrl = "https://testnets.opensea.io";
    $(".network").html("Rinkeby Test Network");
    // $(".network").css({
    //   background: "orange",
    //   "-webkit-text-fill-color": "transparent",
    //   "-webkit-background-clip": "text",
    // });
  } else {
    $(".network").html("Invalid Network");
    $(".network").css({
      background: "red",
      "-webkit-text-fill-color": "transparent",
      "-webkit-background-clip": "text",
    });
  }
  const accounts = await web3.eth.getAccounts();
  selectedAccount = accounts[0];
  let ensName = await getEnsName(selectedAccount);
  console.log(selectedAccount);
  $(".account").html(ensName);
}

async function write(token, content) {
  etherChat.methods.write(token, content).send({ from: selectedAccount });
}

async function getData(token) {
  $(".chatroom-body").html("");
  if (emitter) {
    emitter.removeAllListeners("data");
  }
  emitter = etherChat.events
    .Write(
      {
        filter: { _token: token },
        fromBlock: 0,
      },
      function (error, event) {}
    )
    .on("data", function (event) {
      let content = event["returnValues"]["_content"];
      let token = event["returnValues"]["_token"];
      let owner = event["returnValues"]["_owner"];
      let id = event["returnValues"]["_id"];
      console.log("【" + token + "】: " + content);
      let card = $(
        "</br><div><h5># " +
          id +
          "</h5>" +
          owner +
          " Say : <div>" +
          content +
          "</div></div></br>"
      );
      $(".chatroom-body").append(card);
    });
}

function getCard() {
  return $(
    '<a class="a-noline" href="#" target="_blank"><div class="card shadow mb-4 card-center"><div class="card-header price-bar" ></div><div class="card-body"><p class="text-rainbow text-center"></p></div></div></a>'
  );
}

function toFixedFloor(input, decimals) {
  let k = 10 ** decimals;
  return Math.floor(input * k) / k;
}

async function swap() {
  let type = $(".swap-bar").attr("type");
  let tokenId = $(".swap-bar").attr("tokenId");
  let tokenAddress = await rainbowWallProtocol.methods
    .tokenList(tokenId)
    .call();

  let rainbowWallToken = new web3.eth.Contract(
    RainbowWallTokenABI,
    tokenAddress
  );

  if (type == "buy") {
    let amount = $(".eth-amount").val();
    rainbowWallToken.methods
      .buy(selectedAccount)
      .send({ from: selectedAccount, value: (amount * 1e18).toString() })
      .on("receipt", async function (receipt) {
        updateAmount(rainbowWallToken);
      });
  } else {
    let amount = $(".token-amount").val();
    rainbowWallToken.methods
      .sell(selectedAccount, (amount * 1e18).toString())
      .send({ from: selectedAccount })
      .on("receipt", async function (receipt) {
        updateAmount(rainbowWallToken);
      });
  }
}

async function updateAmount(rainbowWallToken) {
  let ethBalance = await web3.eth.getBalance(selectedAccount);
  $(".uint-balance").html(
    "Balance: " + toFixedFloor(ethBalance / 1e18, 6) + " " + uint
  );
  let tokenBalance = await rainbowWallToken.methods
    .balanceOf(selectedAccount)
    .call();
  let symbol = await rainbowWallToken.methods.symbol().call();
  $(".token-balance").html(
    "Balance: " + toFixedFloor(tokenBalance / 1e18, 6) + " " + symbol
  );
}

function clickToCopy() {
  let tokenId = $(".created-tokenId").html();
  navigator.clipboard.writeText(
    explorerNFTUrl +
      "/assets/" +
      rainbiwWallProtocolContractAddress +
      "/" +
      tokenId
  );
}

async function getMetadatas() {
  let totalSupply = await rainbowWallProtocol.methods.totalSupply().call();
  if (totalSupply > 0)
    for (const index of generateArray(0, totalSupply - 1).reverse()) {
      await appendContent(index + 1);
    }
}

async function appendContent(tokenId) {
  let card = getCard();
  let textBody = card.find(".text-rainbow");
  let priceBar = card.find(".price-bar");
  let cid = await rainbowWallProtocol.methods.tokenURI(tokenId).call();
  card.attr(
    "href",
    explorerNFTUrl +
      "/assets/" +
      rainbiwWallProtocolContractAddress +
      "/" +
      tokenId
  );
  let tokenAddress = await rainbowWallProtocol.methods
    .tokenList(tokenId)
    .call();

  let rainbowWallToken = new web3.eth.Contract(
    RainbowWallTokenABI,
    tokenAddress
  );

  let symbol = await rainbowWallToken.methods.symbol().call();
  let price = await rainbowWallToken.methods.price().call();
  card.attr("tokenId", tokenId);
  priceBar.html(
    symbol + " - TOKEN PRICE : " + toFixedFloor(price / 1e18, 6) + " " + uint
  );

  cid = cid.toString().replace("ipfs://", "");
  let data = await catFromIpfs(cid);
  let json = JSON.parse(data);
  data = json.description.replace(/\n/g, "<br/>");

  textBody.html(data);
  $(".contentView").append(card);
}

function generateArray(start, end) {
  return Array.from(new Array(end + 1).keys()).slice(start);
}

async function getEnsName(account) {
  const ens = new ethers.providers.Web3Provider(web3.currentProvider);
  try {
    let ensName = await ens.lookupAddress(account);
    if (ensName == null) return account;
    return ensName;
  } catch (e) {
    return account;
  }
}

async function uploadToIpfs(content) {
  let res = await ipfs.add(content);
  console.log(res);
  return res["cid"];
}

async function catFromIpfs(cid) {
  let contents = "";
  let source = ipfs.cat(cid);
  const decoder = new TextDecoder("utf-8");

  for await (const chunk of source) {
    contents += decoder.decode(chunk, {
      stream: true,
    });
  }

  contents += decoder.decode();
  return contents;
}

function constructMetadata(content, image, type) {
  json = {
    name: "RainbowWall",
    description: content,
    image: constructImage(content, image, type),
  };
  return JSON.stringify(json);
}

function constructImage(content, image, type) {
  let data;
  if (type == TYPE.TEXT) {
    let list = content.replace("↵", "\n").split("\n");

    let text = "";
    for (const i in list) {
      text =
        text +
        '<text x="50%" y="' +
        20 * (parseInt(i) + 1) +
        '" fill="url(#grad1)" class="base">' +
        list[i] +
        "</text>";
    }
    let svg =
      '<svg xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMinYMin meet" viewBox="0 0 500 500"> <linearGradient id="grad1" x1="0%" y1="0%" x2="100%" y2="0%">  <stop offset="0%" style="stop-color:red;stop-opacity:1" />  <stop offset="100%" style="stop-color:blue;stop-opacity:1" /> </linearGradient> <style>.base{text-anchor:middle;} </style> ' +
      text +
      "</svg>";

    data = "data:image/svg+xml;base64," + Base64.encode(svg);
  } else if (type == TYPE.IMAGE) {
  }
  return data;
}

async function paste() {
  let content = $(".text-content").val();
  $(".pasteButton").attr("disabled", "true");
  $(".pasteButton").html("WAITING...");
  let metadata = constructMetadata(content, "", TYPE.TEXT);
  let cid = await uploadToIpfs(metadata);
  let pasteContent = "ipfs://" + cid.toString();
  await rainbowWallProtocol.methods
    .paste(pasteContent)
    .send({
      from: selectedAccount,
    })
    .on("transactionHash", function (hash) {
      $(".pasteButton").html('<span class="text-rainbow">PASTE</span>');
      $(".pasteButton").removeAttr("disabled");
      console.log(hash);
    })
    .on("receipt", async function (receipt) {
      let log = receipt["events"]["Paste"]["returnValues"];
      let tokenId = log["tokenId"];
      let symbol = log["symbol"];
      let metadataJson = JSON.parse(metadata);
      displayCreatedBar(tokenId, symbol, metadataJson["image"]);
    })
    .on("error", function (e) {
      $(".pasteButton").html('<span class="text-rainbow">PASTE</span>');
      $(".pasteButton").removeAttr("disabled");
    });
}

async function displayCreatedBar(tokenId, symbol, image) {
  $(".created-tokenId").html(tokenId);
  $(".created-symbol").html(symbol);
  $(".created-img").attr("src", image);
  $(".share-twitter").attr(
    "href",
    "https://twitter.com/share?text=" +
      explorerNFTUrl +
      "/assets/" +
      rainbiwWallProtocolContractAddress +
      "/" +
      tokenId
  );
  $("#afterPaste").modal();
}

function hasBorther(va1) {
  if (va1.next()[0]) {
    return { bor: va1.next() };
  } else {
    return { par: va1.parent() };
  }
}

function removeDiv(app, Div) {
  if (app.bor) {
    Div.insertBefore(app.bor);
  } else {
    Div.appendTo(app.par);
  }
}

function changePosition2() {
  var select1 = $("#select1");
  var select2 = $("#select2");
  if (select1.val() != select2.val()) {
    var removeDiv1 = $("#" + select1.val());
    var removeDiv2 = $("#" + select2.val());
    var appendToObj1 = hasBorther(removeDiv1);
    var appendToObj2 = hasBorther(removeDiv2);
    addCartoon(removeDiv1, removeDiv2);

    removeDiv(appendToObj1, removeDiv2);
    removeDiv(appendToObj2, removeDiv1);
  } else {
    alert("请选择不同元素交换位置！");
  }
}

function init() {
  $('[data-toggle="tooltip"]').tooltip();
  // Toggle the side navigation
  $("#sidebarToggle, #sidebarToggleTop").on("click", function (e) {
    $("body").toggleClass("sidebar-toggled");
    $(".sidebar").toggleClass("toggled");
    if ($(".sidebar").hasClass("toggled")) {
      $(".sidebar .collapse").collapse("hide");
    }
  });

  // Close any open menu accordions when window is resized below 768px
  $(window).resize(function () {
    if ($(window).width() < 768) {
      $(".sidebar .collapse").collapse("hide");
    }
    // Toggle the side navigation when window is resized below 480px
    if ($(window).width() < 480 && !$(".sidebar").hasClass("toggled")) {
      $("body").addClass("sidebar-toggled");
      $(".sidebar").addClass("toggled");
      $(".sidebar .collapse").collapse("hide");
    }
  });

  // Prevent the content wrapper from scrolling when the fixed side navigation hovered over
  $("body.fixed-nav .sidebar").on(
    "mousewheel DOMMouseScroll wheel",
    function (e) {
      if ($(window).width() > 768) {
        var e0 = e.originalEvent,
          delta = e0.wheelDelta || -e0.detail;
        this.scrollTop += (delta < 0 ? 1 : -1) * 30;
        e.preventDefault();
      }
    }
  );

  $("#commentModal").on("show.bs.modal", function (event) {
    var button = $(event.relatedTarget); // Button that triggered the modal
    var recipient = button.data("whatever"); // Extract info from data-* attributes
    // If necessary, you could initiate an AJAX request here (and then do the updating in a callback).
    // Update the modal's content. We'll use jQuery here, but you could use a data binding library or other methods instead.
    var modal = $(this);
    modal.find(".commentButton").attr("onclick", "comment(" + recipient + ")");
  });

  // Scroll to top button appear
  $(document).on("scroll", function () {
    var scrollDistance = $(this).scrollTop();
    if (scrollDistance > 100) {
      $(".scroll-to-top").fadeIn();
    } else {
      $(".scroll-to-top").fadeOut();
    }
  });

  // Smooth scrolling using jQuery easing
  $(document).on("click", "a.scroll-to-top", function (e) {
    var $anchor = $(this);
    $("html, body")
      .stop()
      .animate(
        {
          scrollTop: $($anchor.attr("href")).offset().top,
        },
        1000,
        "easeInOutExpo"
      );
    e.preventDefault();
  });

  $(document).on("click", "#searchButton", function () {
    let content = $("#search").val();
    window.location.href = "search.html?address=" + content;
  });
}

(async function ($) {
  "use strict"; // Start of use strict
  $(document).ready(function () {
    $(".topbar").load("common/topbar.html", function () {
      $(".modalbar").load("common/modalbar.html", function () {
        init();
        initWeb3();
      });
    });
  });
})(jQuery); // End of use strict
